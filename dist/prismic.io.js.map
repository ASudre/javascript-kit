{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","prismic.io.js","lib/api.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_api","_api2","./lib/api.js",2,"global","_typeof","Symbol","constructor","Global","undefined","Form","name","fields","form_method","rel","enctype","action","this","SearchForm","api","form","data","field","Response","page","results_per_page","results_size","total_results_size","total_pages","next_page","prev_page","results","Ref","ref","label","isMaster","scheduledAt","id","globalCache","g","window","prismicCache","Prismic","ApiCache","prismic","url","callback","maybeAccessToken","maybeRequestHandler","maybeApiCache","maybeApiDataTTL","fn","init","get","err","bookmarks","experiments","Experiments","prototype","AT","ANY","SIMILAR","FULLTEXT","NUMBER","GT","LT","DATE","AFTER","BEFORE","BETWEEN","DOCUMENT","ID","TYPE","TAGS","self","cacheKey","apiCacheKey","apiCache","requestHandler","xhr","ttl","parsed","parse","apiDataTTL","set","refresh","remove","refs","master","types","tags","forms","hasOwnProperty","accessToken","map","isMasterRef","filter","oauthInitiate","oauthToken","indexOf","Utils","request","formId","currentExperiment","current","parseDoc","json","fragments","type","slugs","push","decodeURIComponent","Document","uid","href","query","q","options","key","submit","getByID","Predicates","at","response","getByIDs","ids","getByUID","getBookmark","bookmark","getById","previewSession","token","linkResolver","defaultUrl","result","console","log","mainDocumentId","mainDocument","cache","documents","fieldDesc","values","multiple","_ref","_query","predicates","Array","slice","apply","arguments","stringQueries","forEach","predicate","firstArg","p","isArray","join","Date","getTime","pageSize","size","fetch","fetchLinks","orderings","_orderings","sep","encodeURIComponent","experimentCookie","previewCookie","Api"],"mappings":"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","file":"prismic.io.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _api = require('./lib/api.js');\n\nvar _api2 = _interopRequireDefault(_api);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _api2.default;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=",null,"(function (Global, undefined) {\n\n    \"use strict\";\n\n    /**\n     * The kit's main entry point; initialize your API like this: Prismic.Api(url, callback, accessToken, maybeRequestHandler)\n     *\n     * @global\n     * @alias Api\n     * @constructor\n     * @param {string} url - The mandatory URL of the prismic.io API endpoint (like: https://lesbonneschoses.prismic.io/api)\n     * @param {function} callback - Optional callback function that is called after the API was retrieved, which will be called with two parameters: a potential error object and the API object\n     * @param {string} maybeAccessToken - The accessToken for an OAuth2 connection\n     * @param {function} maybeRequestHandler - Environment specific HTTP request handling function\n     * @param {object} maybeApiCache - A cache object with get/set functions for caching API responses\n     * @param {int} maybeApiDataTTL - How long (in seconds) to cache data used by the client to make calls (e.g. refs). Defaults to 5 seconds\n     * @returns {Api} - The Api object that can be manipulated\n     */\n    var prismic = function(url, callback, maybeAccessToken, maybeRequestHandler, maybeApiCache, maybeApiDataTTL) {\n        var api = new prismic.fn.init(url, maybeAccessToken, maybeRequestHandler, maybeApiCache, maybeApiDataTTL);\n        //Use cached api data if available\n        api.get(function (err, data) {\n            if (callback && err) { return callback(err); }\n\n            if (data) {\n                api.data = data;\n                api.bookmarks = data.bookmarks;\n                api.experiments = new Global.Prismic.Experiments(data.experiments);\n            }\n\n            if (callback) { return callback(null, api); }\n        });\n\n        return api;\n    };\n    // note that the prismic variable is later affected as \"Api\" while exporting\n\n    // Defining Api's instance methods; note that the prismic variable is later affected as \"Api\" while exporting\n    prismic.fn = prismic.prototype = {\n\n        // Predicates\n        AT: \"at\",\n        ANY: \"any\",\n        SIMILAR: \"similar\",\n        FULLTEXT: \"fulltext\",\n        NUMBER: {\n            GT: \"number.gt\",\n            LT: \"number.lt\"\n        },\n        DATE: {\n            // Other date operators are available: see the documentation.\n            AFTER: \"date.after\",\n            BEFORE: \"date.before\",\n            BETWEEN: \"date.between\"\n        },\n\n        // Fragment: usable as the second element of a query array on most predicates (except SIMILAR).\n        // You can also use \"my.*\" for your custom fields.\n        DOCUMENT: {\n            ID: \"document.id\",\n            TYPE: \"document.type\",\n            TAGS: \"document.tags\"\n        },\n\n        constructor: prismic,\n        data: null,\n\n        /**\n         * Fetches data used to construct the api client, from cache if it's\n         * present, otherwise from calling the prismic api endpoint (which is\n         * then cached).\n         *\n         * @param {function} callback - Callback to receive the data\n         */\n        get: function(callback) {\n            var self = this;\n            var cacheKey = this.apiCacheKey;\n\n            this.apiCache.get(cacheKey, function (err, value) {\n                if (err) { return callback(err); }\n                if (value) { return callback(null, value); }\n\n                self.requestHandler(self.url, function(err, data, xhr, ttl) {\n                    if (err) { return callback(err, null, xhr); }\n\n                    var parsed = self.parse(data);\n                    ttl = ttl || self.apiDataTTL;\n\n                    self.apiCache.set(cacheKey, parsed, ttl, function (err) {\n                        if (err) { return callback(err, null, xhr); }\n                        return callback(null, parsed, xhr);\n                    });\n                });\n            });\n        },\n\n        /**\n         * Cleans api data from the cache and fetches an up to date copy.\n         *\n         * @param {function} callback - Optional callback function that is called after the data has been refreshed\n         */\n        refresh: function (callback) {\n            var self = this;\n            var cacheKey = this.apiCacheKey;\n\n            this.apiCache.remove(cacheKey, function (err) {\n                if (callback && err) { return callback(err); }\n                if (!callback && err) { throw err; }\n\n                self.get(function (err, data, xhr) {\n                    if (callback && err) { return callback(err); }\n                    if (!callback && err) { throw err; }\n\n                    self.data = data;\n                    self.bookmarks = data.bookmarks;\n                    self.experiments = new Global.Prismic.Experiments(data.experiments);\n\n                    if (callback) { return callback(); }\n                });\n            });\n        },\n\n        /**\n         * Parses and returns the /api document.\n         * This is for internal use, from outside this kit, you should call Prismic.Api()\n         *\n         * @param {string} data - The JSON document responded on the API's endpoint\n         * @returns {Api} - The Api object that can be manipulated\n         * @private\n         */\n        parse: function(data) {\n            var refs,\n                master,\n                forms = {},\n                form,\n                types,\n                tags,\n                f,\n                i;\n\n            // Parse the forms\n            for (i in data.forms) {\n                if (data.forms.hasOwnProperty(i)) {\n                    f = data.forms[i];\n\n                    if(this.accessToken) {\n                        f.fields['access_token'] = {};\n                        f.fields['access_token']['type'] = 'string';\n                        f.fields['access_token']['default'] = this.accessToken;\n                    }\n\n                    form = new Form(\n                        f.name,\n                        f.fields,\n                        f.form_method,\n                        f.rel,\n                        f.enctype,\n                        f.action\n                    );\n\n                    forms[i] = form;\n                }\n            }\n\n            refs = data.refs.map(function (r) {\n                return new Ref(\n                    r.ref,\n                    r.label,\n                    r.isMasterRef,\n                    r.scheduledAt,\n                    r.id\n                );\n            }) || [];\n\n            master = refs.filter(function (r) {\n                return r.isMaster === true;\n            });\n\n            types = data.types;\n\n            tags = data.tags;\n\n            if (master.length === 0) {\n                throw (\"No master ref.\");\n            }\n\n            return {\n                bookmarks: data.bookmarks || {},\n                refs: refs,\n                forms: forms,\n                master: master[0],\n                types: types,\n                tags: tags,\n                experiments: data.experiments,\n                oauthInitiate: data['oauth_initiate'],\n                oauthToken: data['oauth_token']\n            };\n\n        },\n\n        /**\n         * Initialisation of the API object.\n         * This is for internal use, from outside this kit, you should call Prismic.Api()\n         * @private\n         */\n        init: function(url, accessToken, maybeRequestHandler, maybeApiCache, maybeApiDataTTL) {\n            this.url = url + (accessToken ? (url.indexOf('?') > -1 ? '&' : '?') + 'access_token=' + accessToken : '');\n            this.accessToken = accessToken;\n            this.apiCache = maybeApiCache || globalCache();\n            this.requestHandler = maybeRequestHandler || Global.Prismic.Utils.request();\n            this.apiCacheKey = this.url + (this.accessToken ? ('#' + this.accessToken) : '');\n            this.apiDataTTL = maybeApiDataTTL || 5;\n            return this;\n        },\n\n        /**\n         * @deprecated use form() now\n         * @param {string} formId - The id of a form, like \"everything\", or \"products\"\n         * @returns {SearchForm} - the SearchForm that can be used.\n         */\n        forms: function(formId) {\n            return this.form(formId);\n        },\n\n        /**\n         * Returns a useable form from its id, as described in the RESTful description of the API.\n         * For instance: api.form(\"everything\") works on every repository (as \"everything\" exists by default)\n         * You can then chain the calls: api.form(\"everything\").query('[[:d = at(document.id, \"UkL0gMuvzYUANCpf\")]]').ref(ref).submit()\n         *\n         * @param {string} formId - The id of a form, like \"everything\", or \"products\"\n         * @returns {SearchForm} - the SearchForm that can be used.\n         */\n        form: function(formId) {\n            var form = this.data.forms[formId];\n            if(form) {\n                return new SearchForm(this, form, {});\n            }\n        },\n\n        /**\n         * The ID of the master ref on this prismic.io API.\n         * Do not use like this: searchForm.ref(api.master()).\n         * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n         *\n         * @returns {string}\n         */\n        master: function() {\n            return this.data.master.ref;\n        },\n\n        /**\n         * Returns the ref ID for a given ref's label.\n         * Do not use like this: searchForm.ref(api.ref(\"Future release label\")).\n         * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n         *\n         * @param {string} label - the ref's label\n         * @returns {string}\n         */\n        ref: function(label) {\n            for(var i=0; i<this.data.refs.length; i++) {\n                if(this.data.refs[i].label == label) {\n                    return this.data.refs[i].ref;\n                }\n            }\n        },\n\n        /**\n         * The current experiment, or null\n         * @returns {Experiment}\n         */\n        currentExperiment: function() {\n            return this.experiments.current();\n        },\n\n        /**\n         * Parse json as a document\n         *\n         * @returns {Document}\n         */\n        parseDoc: function(json) {\n            var fragments = {};\n            for(var field in json.data[json.type]) {\n                fragments[json.type + '.' + field] = json.data[json.type][field];\n            }\n\n            var slugs = [];\n            if (json.slugs !== undefined) {\n                for (var i = 0; i < json.slugs.length; i++) {\n                    slugs.push(decodeURIComponent(json.slugs[i]));\n                }\n            }\n\n            return new Global.Prismic.Document(\n                json.id,\n                json.uid || null,\n                json.type,\n                json.href,\n                json.tags,\n                slugs,\n                fragments\n            );\n        },\n\n        /**\n         * Query the repository\n         * @param {string|array|Predicate} the query itself\n         * @param {object} additional parameters\n\t\t\t\t * @param {function} callback(err, response)\n         */\n        query: function(q, options, callback) {\n            var form = this.form('everything');\n            for (var key in options) {\n                form = form.set(key, options[key]);\n            }\n            if (!options['ref']) {\n                form = form.ref(this.master());\n            }\n            return form.query(q).submit(callback);\n        },\n\n\t\t\t\t/**\n\t\t\t\t * Retrieve the document with the given id\n\t\t\t\t * @param {string} id\n         * @param {object} additional parameters\n\t\t\t\t * @param {function} callback(err, response)\n\t\t\t\t */\n\t\t\t\tgetByID: function(id, options, callback) {\n            var Predicates = Global.Prismic.Predicates;\n\t\t\t\t\t\treturn this.query(Predicates.at('document.id', id), options, function(err, response) {\n\t\t\t\t\t\t\t\tif (response && response.results.length > 0) {\n\t\t\t\t\t\t\t\t\t\tcallback(err, response.results[0]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcallback(err, null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Retrieve multiple documents from an array of id\n\t\t\t\t * @param {array} ids\n         * @param {object} additional parameters\n\t\t\t\t * @param {function} callback(err, response)\n\t\t\t\t */\n\t\t\t\tgetByIDs: function(ids, options, callback) {\n\t\t\t\t\t\treturn this.query(['in', 'document.id', ids], options, callback);\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Retrieve the document with the given uid\n\t\t\t\t * @param {string} type the custom type of the document\n\t\t\t\t * @param {string} uid\n         * @param {object} additional parameters\n\t\t\t\t * @param {function} callback(err, response)\n\t\t\t\t */\n\t\t\t\tgetByUID: function(type, uid, options, callback) {\n            var Predicates = Global.Prismic.Predicates;\n\t\t\t\t\t\treturn this.query(Predicates.at('my.'+type+'.uid', uid), options, function(err, response) {\n\t\t\t\t\t\t\t\tif (response && response.results.length > 0) {\n\t\t\t\t\t\t\t\t\t\tcallback(err, response.results[0]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcallback(err, null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Retrieve the document with the given uid\n\t\t\t\t * @param {string} type the custom type of the document\n\t\t\t\t * @param {string} uid\n         * @param {object} additional parameters\n\t\t\t\t * @param {function} callback(err, response)\n\t\t\t\t */\n\t\t\t\tgetBookmark: function(bookmark, options, callback) {\n\t\t\t\t\t\tvar id = this.bookmarks[bookmark];\n\t\t\t\t\t\tif (id) {\n\t\t\t\t\t\t\t\tthis.getById(this.bookmarks[bookmark], options, callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcallback(new Error(\"Error retrieving bookmarked id\"));\n\t\t\t\t\t\t}\n\t\t\t\t},\n\n        /**\n         * Return the URL to display a given preview\n         * @param {string} token as received from Prismic server to identify the content to preview\n         * @param {function} linkResolver the link resolver to build URL for your site\n         * @param {string} defaultUrl the URL to default to return if the preview doesn't correspond to a document\n         *                (usually the home page of your site)\n         * @param {function} callback to get the resulting URL\n         */\n        previewSession: function(token, linkResolver, defaultUrl, callback) {\n            var api = this;\n            var Predicates = Global.Prismic.Predicates;\n            this.requestHandler(token, function (err, result, xhr) {\n                if (err) {\n                    console.log(\"Error from the request\");\n                    callback(err, defaultUrl, xhr);\n                    return;\n                }\n                try {\n                    var mainDocumentId = result.mainDocument;\n                    if (!mainDocumentId) {\n                        callback(null, defaultUrl, xhr);\n                    } else {\n                        api.form(\"everything\").query(Predicates.at(\"document.id\", mainDocumentId)).ref(token).submit(function(err, response) {\n                            if (err) {\n                                callback(err);\n                            }\n                            try {\n                                if (response.results.length === 0) {\n                                    callback(null, defaultUrl, xhr);\n                                } else {\n                                    callback(null, linkResolver(response.results[0]), xhr);\n                                }\n                            } catch (e) {\n                                callback(e);\n                            }\n                        });\n                    }\n                } catch (e) {\n                    console.log(\"Caught e \", e);\n                    callback(e, defaultUrl, xhr);\n                }\n            });\n        },\n\n        /**\n         * Fetch a URL corresponding to a query, and parse the response as a Response object\n         */\n        request: function(url, callback) {\n            var api = this;\n            var cacheKey = url + (this.accessToken ? ('#' + this.accessToken) : '');\n            var cache = this.apiCache;\n            cache.get(cacheKey, function (err, value) {\n                if (err) { return callback(err); }\n                if (value) { return callback(null, value); }\n                api.requestHandler(url, function (err, documents, xhr, ttl) {\n                    if (err) {\n                        callback(err, null, xhr);\n                        return;\n                    }\n                    var results = documents.results.map(prismic.fn.parseDoc);\n                    var response = new Response(\n                        documents.page,\n                        documents.results_per_page,\n                        documents.results_size,\n                        documents.total_results_size,\n                        documents.total_pages,\n                        documents.next_page,\n                        documents.prev_page,\n                        results || []);\n                    if (ttl) {\n                        cache.set(cacheKey, response, ttl, function (err) {\n                            if (err) {\n                                return callback(err);\n                            }\n                            return callback(null, response);\n                        });\n                    } else {\n                        return callback(null, response);\n                    }\n                });\n            });\n        }\n\n    };\n\n    prismic.fn.init.prototype = prismic.fn;\n\n    /**\n     * Embodies a submittable RESTful form as described on the API endpoint (as per RESTful standards)\n     * @constructor\n     * @private\n     */\n    function Form(name, fields, form_method, rel, enctype, action) {\n        this.name = name;\n        this.fields = fields;\n        this.form_method = form_method;\n        this.rel = rel;\n        this.enctype = enctype;\n        this.action = action;\n    }\n\n    Form.prototype = {};\n\n    /**\n     * Embodies a SearchForm object. To create SearchForm objects that are allowed in the API, please use the API.form() method.\n     * @constructor\n     * @global\n     * @alias SearchForm\n     */\n    function SearchForm(api, form, data) {\n        this.api = api;\n        this.form = form;\n        this.data = data || {};\n\n        for(var field in form.fields) {\n            if(form.fields[field]['default']) {\n                this.data[field] = [form.fields[field]['default']];\n            }\n        }\n    }\n\n    SearchForm.prototype = {\n\n        /**\n         * Set an API call parameter. This will only work if field is a valid field of the\n         * RESTful form in the first place (as described in the /api document); otherwise,\n         * an \"Unknown field\" error is thrown.\n         * Please prefer using dedicated methods like query(), orderings(), ...\n         *\n         * @param {string} field - The name of the field to set\n         * @param {string} value - The value that gets assigned\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        set: function(field, value) {\n            var fieldDesc = this.form.fields[field];\n            if(!fieldDesc) throw new Error(\"Unknown field \" + field);\n            var values= this.data[field] || [];\n            if(value === '' || value === undefined) {\n                // we must compare value to null because we want to allow 0\n                value = null;\n            }\n            if(fieldDesc.multiple) {\n                if (value) values.push(value);\n            } else {\n                values = value && [value];\n            }\n            this.data[field] = values;\n            return this;\n        },\n\n        /**\n         * Sets a ref to query on for this SearchForm. This is a mandatory\n         * method to call before calling submit(), and api.form('everything').submit()\n         * will not work.\n         *\n         * @param {Ref} ref - The Ref object defining the ref to query\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        ref: function(ref) {\n            return this.set(\"ref\", ref);\n        },\n\n        /**\n         * Sets a predicate-based query for this SearchForm. This is where you\n         * paste what you compose in your prismic.io API browser.\n         *\n         * @example form.query(Prismic.Predicates.at(\"document.id\", \"foobar\"))\n         * @param {string|...array} query - Either a query as a string, or as many predicates as you want. See Prismic.Predicates.\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        query: function(query) {\n            if (typeof query === 'string') {\n                return this.set(\"q\", query);\n            } else {\n                var predicates;\n                if (query.constructor === Array && query.length > 0 && query[0].constructor === Array) {\n                    predicates = query;\n                } else {\n                    predicates = [].slice.apply(arguments); // Convert to a real JS array\n                }\n                var stringQueries = [];\n                predicates.forEach(function (predicate) {\n                    var firstArg = (predicate[1].indexOf(\"my.\") === 0 || predicate[1].indexOf(\"document\") === 0) ? predicate[1]\n                        : '\"' + predicate[1] + '\"';\n                  stringQueries.push(\"[:d = \" + predicate[0] + \"(\" + firstArg +\n                                     (predicate.length > 2 ? \", \" : \"\") +\n                                     (function() {\n                        return predicate.slice(2).map(function(p) {\n                            if (typeof p === 'string') {\n                                return '\"' + p + '\"';\n                            } else if (Array.isArray(p)) {\n                                return \"[\" + p.map(function (e) {\n                                    return '\"' + e + '\"';\n                                }).join(',') + \"]\";\n                            } else if (p instanceof Date) {\n                                return p.getTime();\n                            } else {\n                                return p;\n                            }\n                        }).join(',');\n                    })() + \")]\");\n                });\n                return this.query(\"[\" + stringQueries.join(\"\") + \"]\");\n            }\n        },\n\n        /**\n         * Sets a page size to query for this SearchForm. This is an optional method.\n         *\n         * @param {number} size - The page size\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        pageSize: function(size) {\n            return this.set(\"pageSize\", size);\n        },\n\n        /**\n         * Restrict the results document to the specified fields\n         *\n         * @param {string|array} fields - The list of fields, array or comma separated string\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        fetch: function(fields) {\n            if (fields instanceof Array) {\n                fields = fields.join(\",\");\n            }\n            return this.set(\"fetch\", fields);\n        },\n\n        /**\n         * Include the requested fields in the DocumentLink instances in the result\n         *\n         * @param {string|array} fields - The list of fields, array or comma separated string\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        fetchLinks: function(fields) {\n            if (fields instanceof Array) {\n                fields = fields.join(\",\");\n            }\n            return this.set(\"fetchLinks\", fields);\n        },\n\n        /**\n         * Sets the page number to query for this SearchForm. This is an optional method.\n         *\n         * @param {number} p - The page number\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        page: function(p) {\n            return this.set(\"page\", p);\n        },\n\n        /**\n         * Sets the orderings to query for this SearchForm. This is an optional method.\n         *\n         * @param {array} orderings - Array of string: list of fields, optionally followed by space and desc. Example: ['my.product.price desc', 'my.product.date']\n         * @returns {SearchForm} - The SearchForm itself\n         */\n        orderings: function(orderings) {\n            if (typeof orderings === 'string') {\n                // Backward compatibility\n                return this.set(\"orderings\", orderings);\n            } else if (!orderings) {\n                // Noop\n                return this;\n            } else {\n                // Normal usage\n                return this.set(\"orderings\", \"[\" + orderings.join(\",\") + \"]\");\n            }\n        },\n\n        /**\n         * Submits the query, and calls the callback function.\n         *\n         * @param {function} callback - Optional callback function that is called after the query was made,\n         * to which you may pass three parameters: a potential error (null if no problem),\n         * a Response object (containing all the pagination specifics + the array of Docs),\n         * and the XMLHttpRequest\n         */\n        submit: function(callback) {\n            var url = this.form.action;\n\n            if (this.data) {\n                var sep = (url.indexOf('?') > -1 ? '&' : '?');\n                for(var key in this.data) {\n                    if (this.data.hasOwnProperty(key)) {\n                        var values = this.data[key];\n                        if (values) {\n                            for (var i = 0; i < values.length; i++) {\n                                url += sep + key + '=' + encodeURIComponent(values[i]);\n                                sep = '&';\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.api.request(url, callback);\n        }\n    };\n\n    /**\n     * Embodies the response of a SearchForm query as returned by the API.\n     * It includes all the fields that are useful for pagination (page, total_pages, total_results_size, ...),\n     * as well as the field \"results\", which is an array of {@link Document} objects, the documents themselves.\n     *\n     * @constructor\n     * @global\n     */\n    function Response(page, results_per_page, results_size, total_results_size, total_pages, next_page, prev_page, results) {\n        /**\n         * The current page\n         * @type {number}\n         */\n        this.page = page;\n        /**\n         * The number of results per page\n         * @type {number}\n         */\n        this.results_per_page = results_per_page;\n        /**\n         * The size of the current page\n         * @type {number}\n         */\n        this.results_size = results_size;\n        /**\n         * The total size of results across all pages\n         * @type {number}\n         */\n        this.total_results_size = total_results_size;\n        /**\n         * The total number of pages\n         * @type {number}\n         */\n        this.total_pages = total_pages;\n        /**\n         * The URL of the next page in the API\n         * @type {string}\n         */\n        this.next_page = next_page;\n        /**\n         * The URL of the previous page in the API\n         * @type {string}\n         */\n        this.prev_page = prev_page;\n        /**\n         * Array of {@link Document} for the current page\n         * @type {Array}\n         */\n        this.results = results;\n    }\n\n    /**\n     * Embodies a prismic.io ref (a past or future point in time you can query)\n     * @constructor\n     * @global\n     */\n    function Ref(ref, label, isMaster, scheduledAt, id) {\n        /**\n         * @field\n         * @description the ID of the ref\n         */\n        this.ref = ref;\n        /**\n         * @field\n         * @description the label of the ref\n         */\n        this.label = label;\n        /**\n         * @field\n         * @description is true if the ref is the master ref\n         */\n        this.isMaster = isMaster;\n        /**\n         * @field\n         * @description the scheduled date of the ref\n         */\n        this.scheduledAt = scheduledAt;\n        /**\n         * @field\n         * @description the name of the ref\n         */\n        this.id = id;\n    }\n    Ref.prototype = {};\n\n    function globalCache() {\n        var g;\n        if (typeof global == 'object') {\n            g = global; // NodeJS\n        } else {\n            g = window; // browser\n        }\n        if (!g.prismicCache) {\n            g.prismicCache = new Global.Prismic.ApiCache();\n        }\n        return g.prismicCache;\n    }\n\n    // -- Export Globally\n\n    Global.Prismic = {\n        experimentCookie: \"io.prismic.experiment\",\n        previewCookie: \"io.prismic.preview\",\n        Api: prismic\n    };\n\n}(typeof exports === 'object' && exports ? exports : (typeof module === \"object\" && module && typeof module.exports === \"object\" ? module.exports : window)));\n"],"sourceRoot":"/source/"}